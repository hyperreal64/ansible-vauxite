- name: Set a hostname to {{ host.name }} {{ task_identifier }}
  ansible.builtin.hostname:
    name: "{{ host.name }}"
    use: systemd

- name: Gather the package facts {{ task_identifier }}
  ansible.builtin.package_facts:
    manager: auto

- name: Template out /etc/hosts {{ task_identifier }}
  ansible.builtin.template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: "0644"

- name: Create user directories {{ task_identifier }}
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/{{ item }}"
    state: directory
  with_items: "{{ host.user_dirs }}"

- name: Template out user-dirs.defaults {{ task_identifier }}
  ansible.builtin.template:
    src: user-dirs.defaults.j2
    dest: /etc/xdg/user-dirs.defaults
    owner: root
    group: root
    mode: "0644"

- name: Delete unused directories in {{ ansible_user_dir }} {{ task_identifier }}
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/{{ item }}"
    state: absent
    recurse: true
  with_items: "{{ host.user_delete_dirs }}"

- name: Test if xdg-user-dirs-update command exists {{ task_identifier }}
  ansible.builtin.shell:
    cmd: command -v xdg-user-dirs-update
    executable: /bin/bash
  register: xdg_user_dirs_update

- name: Run xdg-user-dirs-update {{ task_identifier }}
  ansible.builtin.shell:
    cmd: "{{ xdg_user_dirs_update.stdout }}"
    executable: /bin/bash
  when:
    - xdg_user_dirs_update.rc == 0

- name: Template out borgmatic config {{ task_identifier }}
  ansible.builtin.template:
    src: borgmatic_config.yaml.j2
    dest: /etc/borgmatic/config.yaml
    owner: root
    group: root
    mode: "0644"

- name: Copy borgmatic systemd services {{ task_identifier }}
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  with_items:
    - autoborg.service
    - autoborg.timer

- name: Install rpm-gpg files to /etc/pki/rpm-gpg {{ task_identifier }}
  ansible.builtin.copy:
    src: pki/
    dest: /etc/pki/
    owner: root
    group: root
    mode: "0644"

- name: Copy RPMFusion repository files to /etc/yum.repos.d {{ task_identifier }}
  ansible.builtin.copy:
    src: rpmfusion.repo
    dest: /etc/yum.repos.d/rpmfusion.repo
    owner: root
    group: root
    mode: "0644"

- name: Add dawid/better_fonts repository {{ task_identifier }}
  ansible.builtin.get_url:
    url: https://copr.fedorainfracloud.org/coprs/dawid/better_fonts/repo/fedora-36/dawid-better_fonts-fedora-36.repo
    dest: /etc/yum.repos.d/dawid-better_fonts-fedora-36.repo
    mode: "0644"

- name: Determine if sockpty already exists {{ task_identifier }}
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.local/bin/sockpty"
  register: sockpty

- name: Pull golang:latest container image for sockpty build {{ task_identifier }}
  containers.podman.podman_image:
    name: docker.io/library/golang:latest
  when: not sockpty.stat.exists

- name: Download sockpty if doesn't exist {{ task_identifier }}
  ansible.builtin.git:
    repo: https://github.com/JayDoubleu/sockpty.git
    dest: /tmp/sockpty
  when: not sockpty.stat.exists

- name: Build and install sockpty if doesn't exist {{ task_identifier }}
  make:
    chdir: /tmp/sockpty
    target: all-podman
  environment:
    PWD: /tmp/sockpty
  changed_when: no
  when: not sockpty.stat.exists

- name: Extract zellij binary {{ task_identifier }}
  ansible.builtin.unarchive:
    src: https://github.com/zellij-org/zellij/releases/download/v0.28.1/zellij-x86_64-unknown-linux-musl.tar.gz
    dest: "{{ ansible_user_dir }}/.local/bin"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "u=rwx,g=r,o=r"